
// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\pcl_base.h"
#include "pcl\point_types.h"
#include <pcl/features/normal_3d.h>

using namespace pcl;
using namespace std;

typedef NormalEstimation<PointXYZ, Normal> normal_estimation;
typedef boost::shared_ptr<PointCloud<PointXYZ>> boost_cloud;
typedef boost::shared_ptr<vector<int>> boost_indices;

#ifdef __cplusplus  
extern "C" {  // only need to export C interface if  
			  // used by C++ source code  
#endif 

EXPORT(normal_estimation*) features_normalEstimation_pointxyzandnormal_ctor()
{
	return new normal_estimation();
}

EXPORT(void) features_normalEstimation_pointxyzandnormal_delete(normal_estimation** ptr)
{
	delete *ptr;
	*ptr = NULL;
}

EXPORT(void) features_normalEstimation_pointxyzandnormal_setSearchMethod(NormalEstimation<PointXYZ, Normal>* ptr, search::Search<PointXYZ>::Ptr tree)
{
	ptr->setSearchMethod(tree);
}

EXPORT(void) features_normalEstimation_pointxyzandnormal_setInputCloud(NormalEstimation<PointXYZ, Normal>* ptr, PointCloud<PointXYZ>* cloud)
{ ptr->setInputCloud(boost_cloud(boost_cloud(), cloud)); }

EXPORT(void) features_normalEstimation_pointxyzandnormal_setIndices(NormalEstimation<PointXYZ, Normal>* ptr, std::vector<int>* indices)
{ ptr->setIndices(boost_indices(boost_indices(), indices)); }

EXPORT(void) features_normalEstimation_pointxyzandnormal_compute(NormalEstimation<PointXYZ, Normal>* ptr, PointCloud<Normal>* cloud)
{ ptr->compute(*cloud); }

EXPORT(void) features_normalEstimation_pointxyzandnormal_setKSearch(NormalEstimation<PointXYZ, Normal>* ptr, int value)
{ ptr->setKSearch(value); }
EXPORT(int) features_normalEstimation_pointxyzandnormal_getKSearch(NormalEstimation<PointXYZ, Normal>* ptr)
{ return ptr->getKSearch(); }
EXPORT(void) features_normalEstimation_pointxyzandnormal_setRadiusSearch(NormalEstimation<PointXYZ, Normal>* ptr, double value)
{ ptr->setRadiusSearch(value); }
EXPORT(double) features_normalEstimation_pointxyzandnormal_getRadiusSearch(NormalEstimation<PointXYZ, Normal>* ptr)
{ return ptr->getRadiusSearch(); }

#ifdef __cplusplus  
}
#endif  
