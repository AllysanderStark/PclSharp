<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@include file="..\Manager.ttinclude"#>
<#@include file="..\InvokeTemplate.ttinclude"#>
<# 
	var manager = Manager.Create(Host, GenerationEnvironment);
	outputClass(manager, "XYZRGBA", "PointXYZRGBA", "PointXYZRGBA");
	manager.Process(true);
#>
// Code generated by a template
using PclSharp.Common;
using PclSharp.Search;
using PclSharp.Std;

namespace PclSharp.Segmentation
{
	public abstract class SupervoxelClustering<PointT> : UnmanagedObject
	{
		public abstract void SetInputCloud(PointCloud<PointT> cloud);
		public abstract void Extract(SupervoxelClusters<PointT> clusters);
	}
}
<#+ void outputClass(Manager manager, string ClassName, string csin, string cppin)
{ 
	var classname = ClassName.ToLower();
	var classFunc = "segmentation_supervoxelclustering_" + classname;
	
	var cppWrapper = "SupervoxelClustering<"+cppin+">";

	manager.StartNewFile("SupervoxelClusteringOf"+ClassName+".generated.cs");
	var i = new InvokeT(classFunc, csin, cppWrapper);
	i.Var("cppin", cppin);
	i.Var("cppWrapper", cppWrapper);
#>
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using PclSharp.Struct;
namespace PclSharp.Segmentation
{
	public static partial class Invoke
	{
		<#= i.Func("IntPtr", "ctor", "float voxelResolution, float seedResolution") #>
		<#= i.Delete() #>

		//methods
		<#=i.FuncI("setInputCloud", "IntPtr cloud")#>
		<#=i.FuncI("extract", "IntPtr clusters")#>

		//properties
		<#=i.Prop("VoxelResolution", "float")#>
	}

	public class SupervoxelClusteringOf<#=ClassName#> : SupervoxelClustering<<#=csin#>>
	{
		public float VoxelResolution
		{
			<#=i.InvokeP("VoxelResolution", "float")#>
		}

		public SupervoxelClusteringOf<#=ClassName#>(float voxelResolution, float seedResolution)
		{
			_ptr = <#=i.Invoke("ctor", "voxelResolution, seedResolution")#>;
		}

		public override void SetInputCloud(PointCloud<<#=csin#>> cloud)
		{
			<#=i.InvokeI("setInputCloud", "cloud")#>;
		}

		public override void Extract(SupervoxelClusters<<#=csin#>> clusters)
		{
			<#=i.InvokeI("extract", "clusters")#>;
		}

		protected override void DisposeObject()
		{
			<#=i.DeleteI()#>;
		}
	}
}
<#+ 
	manager.EndBlock(); 
	manager.StartNewFile("..\\..\\PclSharp.Extern\\segmentation\\SupervoxelClusteringOf"+ClassName+".generated.h");
#>
// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\point_types.h"
#include <pcl/segmentation/supervoxel_clustering.h>

using namespace pcl;
using namespace std;

typedef boost::shared_ptr<PointCloud<<#=cppin#>>> boost_cloud;

#ifdef __cplusplus
extern "C" {
#endif 

<#=i.Export("cppWrapper*", "ctor", "float voxelResolution, float seedResolution")#>
{
	return new <#=cppWrapper#>(voxelResolution, seedResolution);
}

<#=i.Export("void", "delete", "cppWrapper** ptr")#>
{
	delete *ptr;
	*ptr = NULL;
}

<#=i.ExportI("void", "setInputCloud", "PointCloud<cppin>* cloud")#>
{
	ptr->setInputCloud(boost_cloud(boost_cloud(), cloud));
}

<#=i.ExportI("void", "extract", "map<uint32_t, Supervoxel<cppin>::Ptr>* clusters")#>
{
	ptr->extract(*clusters);
}

<#=i.ExportP("VoxelResolution", "float")#>

#ifdef __cplusplus  
}
#endif  
<#+	i.Dispose(); manager.EndBlock(false); }#>