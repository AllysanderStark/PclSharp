<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@include file="..\Manager.ttinclude"#>
<#@include file="..\InvokeTemplate.ttinclude"#>
<# 
	var manager = Manager.Create(Host, GenerationEnvironment);
	outputClass(manager, "PointXYZ", "PointXYZ", "PointXYZ", "PointXYZ");
	manager.Process(true);
#>

namespace PclSharp.Registration
{
	public class TransformationEstimation<PointSource, PointTarget>
	{
	}
}

<#+ void outputClass(Manager manager, string css, string cps, string cst, string cpt)
{ 
	var ClassName = css + "_" + cst;
	var classname = ClassName.ToLower();
	var classFunc = "registration_transformationEstimation_" + classname;
	
	var cppWrapper = "TransformationEstimation<"+cps+", "+cpt+">";

	manager.StartNewFile("TransformationEstimationOf"+ClassName+".generated.cs");
	var i = new InvokeT(classFunc, css, cppWrapper);
	i.Var("cps", cps);
	i.Var("cpt", cpt);
	i.Var("cppWrapper", cppWrapper);
#>

<#+ 
	manager.EndBlock(); 
	manager.StartNewFile("..\\..\\PclSharp.Extern\\registration\\TransformationEstimationOf"+ClassName+".generated.h");
#>
#pragma once
#include "..\export.h"

#include <pcl/point_types.h>
#include <pcl/registration/transformation_estimation.h>

using namespace pcl;
using namespace std;

typedef boost::shared_ptr<PointCloud<<#=cps#>>> boost_src;
typedef boost::shared_ptr<vector<int>> boost_indices;

#ifdef __cplusplus
extern "C" {
#endif 

<#=i.Export("cppWrapper*", "ctor", "")#>
{ return new <#=cppWrapper#>(); }

<#=i.Export("void", "delete", "cppWrapper** ptr")#>
{
	delete *ptr;
	*ptr = NULL;
}

<#=i.ExportI("void", "estimateRigidTransformation", "PointCloud<cps>* cloud_src, PointCloud<cpt>* cloud_tgt, Matrix4* transformation_matrix")#>
{ ptr->estimateRigidTransformation(*cloud_src, *cloud_tgt, *transformation_matrix); }

#ifdef __cplusplus  
}
#endif  
<#+	i.Dispose(); manager.EndBlock(false); }#>