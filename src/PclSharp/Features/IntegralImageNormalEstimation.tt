<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@include file="..\Manager.ttinclude"#>
<#@include file="..\InvokeTemplate.ttinclude"#>
<# 
	var manager = Manager.Create(Host, GenerationEnvironment);
	outputClass(manager, "XYZ", "Vector3", "PointXYZ", "Normal", "Normal");
	manager.Process(true);
#>
<#+ void outputClass(Manager manager, string ClassName, string csin, string cppin, string csout, string cppout)
{ 
	ClassName = cppin + "And" + cppout;
	var classname = ClassName.ToLower();
	var classFunc = "features_integralImageNormalEstimation_" + classname;
	
	var cppWrapper = "IntegralImageNormalEstimation<"+cppin+", "+cppout+">";

	manager.StartNewFile("IntegralImageNormalEstimationOf"+ClassName+".generated.cs");
	var i = new InvokeT(classFunc, csin, cppWrapper);
	i.Var("cppin", cppin);
	i.Var("cppout", cppout);
#>
// Code generated by a template
using System;
using System.Collections.Generic;
using System.Numerics;
using System.Runtime.InteropServices;
using PclSharp.Struct;
using PclSharp.Std;

namespace PclSharp.Features
{
	public static partial class Invoke
	{
		<#= i.Ctor() #>
		<#= i.Delete() #>
	}

	public class IntegralImageNormalEstimation<#=ClassName#>
	{
		_ptr = <#=i.Invoke("ctor")#>;
	}
}

<#+ 
	manager.EndBlock(); 
	manager.StartNewFile("..\\..\\PclSharp.Extern\\features\\IntegralImageNormalEstimationOf"+ClassName+".generated.h");
#>
// Code generated by a template
#pragma once
#include "..\export.h"

#include "pcl\pcl_base.h"
#include "pcl\point_types.h"
#include <pcl/features/integral_image_normal.h>

using namespace pcl;
using namespace std;

typedef <#=cppWrapper#> integral_image;

#ifdef __cplusplus  
extern "C" {  // only need to export C interface if  
			  // used by C++ source code  
#endif 

<#=i.Export("integral_image*", "ctor", "")#>
{
	return new integral_image();
}

<#=i.Export("void", "delete", "integral_image** ptr")#>
{
	delete *ptr;
	*ptr = NULL;
}

#ifdef __cplusplus  
}
#endif  
<#+	i.Dispose(); manager.EndBlock(false); #>
<#+ } #>